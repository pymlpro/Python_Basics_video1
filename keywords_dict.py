keywords = [('False', 'Boolean value, result of comparison operations'),
            ('None', 'Represents a null value'),
            ('True', 'Boolean value, result of comparison operations'),
            ('and', 'A logical operator'),
            ('as', 'To create an alias'),
            ('assert', 'For debugging'),
            ('async', 'The async keyword is used to create a Python coroutine'),
            ('await', 'Suspends execution of a coroutine until it completes'),
            ('break', 'To break out of a loop'),
            ('class', 'To define a class'),
            ('continue', 'To continue to the next iteration of a loop'),
            ('def', 'To define a function'),
            ('del', 'To delete an object'),
            ('elif', 'Used in conditional statements, same as else if'),
            ('else', 'Used in conditional statements'),
            ('except', 'Used with exceptions, what to do when an exception occurs'),
            ('finally', 'Used with exceptions, a block of code that will be executed no matter if there is an exception or not'),
            ('for', 'To create a for loop'),
            ('from', 'To import specific parts of a module'),
            ('global', 'To declare a global variable'),
            ('if', 'To make a conditional statement'),
            ('import', 'To import a module'),
            ('in', 'To check if a value is present in a list, tuple, etc.'),
            ('is', 'To test if two variables are equal'),
            ('lambda', 'To create an anonymous function'),
            ('nonlocal', 'To declare a non-local variable'),
            ('not', 'A logical operator'),
            ('or', 'A logical operator'),
            ('pass', 'A null statement, a statement that will do nothing'),
            ('raise', 'To raise an exception'),
            ('return', 'To exit a function and return a value'),
            ('try', 'To make a try...except statement'),
            ('while', 'To create a while loop'),
            ('with', 'Used to simplify exception handling'),
            ('yield', 'To end a function, returns a generator')]

keywords_dict = dict(keywords)
keywords_dict